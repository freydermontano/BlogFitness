@* @model BlogFitnessApp.Models.Domain.BlogPost; *@


@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager  


@model BlogFitnessApp.Models.ViewModels.BlogDetailsViewModel;

 

@{
    //Titulo de la pagina
    ViewData["Title"] = Model.PageTitle;
}


<div class="container-xl py-5">
    <div class="row justify-content-center">
        @if (Model != null)
        {
            <div class="col-12 col-lg-8">


                @* Mostrar Likes  *@
                <div class="col-12 col-lg-4 justify-content-start p-3">

                    @* Mostrar total de likes para todos *@
                    <span class="btn px-4 py-2 @(signInManager.IsSignedIn(User) && Model.Liked ? "disabled" : "")" id="likeDisplay">
                        <i class="fas fa-thumbs-up me-2 @(signInManager.IsSignedIn(User) && Model.Liked ? "text-primary" : "")"></i>
                        <span id="totalLikes" class="fw-bold">@Model.TotalLikes</span> Likes
                    </span>

                    @* Boton solo si esta logueado y no ha dado like *@
                    @if (signInManager.IsSignedIn(User) && !Model.Liked)
                    {
                        <button id="btnLike" class="btn btn-outline-primary mt-2">
                            <i class="fas fa-thumbs-up me-2"></i> ¡Me gusta!
                        </button>
                    }
                </div>



                <div class=" overflow-hidden bg-white p-4">
                    <img src="@Model.FeaturedImageUrl"
                         alt="@Model.Heading"
                         class="w-100 mb-4 rounded-4"
                         style="max-height: 450px; object-fit: cover;" />

                    <h1 class="fw-bold mb-3">@Model.Heading</h1>
                    <p class="text-muted fs-5 mb-4">@Model.ShortDescription</p>


                    <div class="mb-4">
                        @foreach (var blogPostTag in Model.Tags)
                        {
                            <span class="badge bg-secondary me-2 px-3 py-2">@blogPostTag.Name</span>
                        }
                    </div>

                    <div class="mb-4 text-muted">
                        <span>Autor: <strong>@Model.Author</strong></span> <br />
                        <span>
                            Publicado el:
                            <strong>
                                @Model.PublishedDate.ToString("dd 'de' MMMM 'de' yyyy", new System.Globalization.CultureInfo("es-ES"))
                            </strong>
                        </span>
                    </div>

                    <div class="fs-5 lh-lg mb-5">
                        @Html.Raw(Model.Content)
                    </div>


                    @*  Comentarios para los usuarios logeado  *@

                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="fw-normal mb-3">Deja un comentario</h5>

                            @if (signInManager.IsSignedIn(User))
                            {
                                <div class="mb-4">
                                    <form method="post">
                                        <div class="mb-4">
                                            <textarea asp-for="CommentDescription"
                                                      class="form-control" 
                                                rows="4" 
                                                required>
                                            </textarea>
                                        </div>
                                        <button type="submit" class="btn btn-dark">Agregar Comentario</button>
                                        <input type="hidden" asp-for="Id" />
                                        <input type="hidden" asp-for="UrlHandle" />
                                    </form>
                                </div>
                            }
                        </div>

                        @* Si hay comentarios, se mostraran a continuacion  *@
                        <div class=" card-body">
                            @if(Model.comments != null && Model.comments.Any())
                            {
                                @foreach(var comment in Model.comments)
                                {
                                    <div class="card mb-3">
                                        <div class="card-body">
                                            <p class="mb-2">@comment.Description</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <small class="text-muted">
                                                    <strong>@comment.Username</strong> -
                                                    @comment.DateAdded.ToString("dd 'de' MMMM 'de' yyyy", new System.Globalization.CultureInfo("es-ES"))
                                                </small>
                                            </div>
                                        </div>
                                    </div>

                                }
                            }
                        </div>
                    </div>
                </div>

                    <p class="text-muted small mt-4">Contenido exclusivo para tu bienestar.</p>
            </div>
        }
        else
        {
            <div class="alert alert-warning text-center" role="alert">
                <h5 class="mb-1">No hay Publicación para mostrar</h5>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        const btnLikeElement = document.getElementById('btnLike');
        const totalLikesElement = document.getElementById('totalLikes');
        const likeDisplay = document.getElementById('likeDisplay');

        async function getTotalLikes() {
            try {
                const response = await fetch('/api/BlogPostLike/@Model.Id/totalLikes');
                if (!response.ok) throw new Error();
                const total = await response.json();
                totalLikesElement.innerText = total;
                return total;
            } catch {
                console.error("Error al obtener likes.");
                return 0;
            }
        }

        async function addLikeForBlog() {
            try {
                const response = await fetch('/api/BlogPostLike/Add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        blogPostId: '@Model.Id'
                    })
                });

                if (!response.ok) throw new Error();

                const total = await getTotalLikes();

                // Actualiza el contador visualmente
                likeDisplay.innerHTML = `
                    <i class="fas fa-thumbs-up me-2 text-primary"></i>
                    <span id="totalLikes" class="fw-bold">${total}</span> Likes
                `;

                // Oculta el boton luego del like
                btnLikeElement.style.display = 'none';

            } catch (err) {
                console.error("Error al enviar like.");
            }
        }

        if (btnLikeElement) {
            btnLikeElement.addEventListener('click', addLikeForBlog);
        }
    </script>
}
